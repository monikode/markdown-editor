{"version":3,"sources":["context/MarkdownContext.js","hooks/useMarkdownEditor.js","component/TreeDots.jsx","component/RawInputArea.jsx","component/MarkdownSanitized.jsx","assets/dribbble.svg","assets/github.svg","assets/tutorial.svg","assets/export.svg","component/Credits.jsx","component/Dialog.jsx","App.js","reportWebVitals.js","index.js"],"names":["React","createContext","useMarkdownEditor","md","Remarkable","useState","rawText","setRawText","open","setOpen","handleChangeRawInputedText","event","target","value","getMarkDownAsHTMLOutput","render","handleOpen","TreeDots","className","RawInputArea","Consumer","onChange","MarkdownSanitized","MarkdownContext","ReactHtmlParser","Credits","src","Dribbble","alt","href","Github","Tutorial","onClick","Export","download","id","text","link","document","getElementById","blob","Blob","type","window","URL","createObjectURL","click","onCopy","Dialog","texts","console","log","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.4a7f3307.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default React.createContext('')","import { useState } from 'react';\r\nimport {Remarkable} from 'remarkable'\r\n\r\nfunction useMarkdownEditor() {\r\n    const md = new Remarkable();\r\n    const [rawText, setRawText] = useState()\r\n    const [open, setOpen] = useState(-1)\r\n    function handleChangeRawInputedText(event){\r\n        setRawText(event.target.value)\r\n    };\r\n    function handleOpen(value){\r\n        setOpen(value)\r\n    };\r\n    function getMarkDownAsHTMLOutput(){\r\n        return md.render(rawText)\r\n    };\r\n\r\n    return { rawText, handleChangeRawInputedText, getMarkDownAsHTMLOutput, open, handleOpen};\r\n}\r\n\r\nexport default useMarkdownEditor","function TreeDots() {\r\n    return (\r\n        <div className=\"dots\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TreeDots","import markdownContext from \"../context/MarkdownContext\";\r\nimport TreeDots from \"./TreeDots\";\r\n\r\nfunction RawInputArea() {\r\n  return (\r\n    <markdownContext.Consumer>\r\n      {(value) => {\r\n        return (\r\n          <div className=\"input window\">\r\n            <div className=\"header\"><TreeDots/></div>\r\n\r\n            <textarea\r\n              value={value.rawText}\r\n              onChange={value.handleChangeRawInputedText}\r\n            ></textarea>\r\n          </div>\r\n        );\r\n      }}\r\n    </markdownContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default RawInputArea;\r\n","import MarkdownContext from \"../context/MarkdownContext\";\r\nimport TreeDots from \"./TreeDots\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nfunction MarkdownSanitized() {\r\n  return (\r\n    <MarkdownContext.Consumer>\r\n      {(value) => {\r\n        return (\r\n          <div className=\"output window\">\r\n            <div className=\"header\">\r\n              <TreeDots />\r\n              <div className=\"search\"></div>\r\n            </div>\r\n            <div className=\"box\">\r\n              {ReactHtmlParser(value.getMarkDownAsHTMLOutput())}\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MarkdownContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default MarkdownSanitized;\r\n","export default __webpack_public_path__ + \"static/media/dribbble.2a787752.svg\";","export default __webpack_public_path__ + \"static/media/github.5d626bd4.svg\";","export default __webpack_public_path__ + \"static/media/tutorial.b7770a4c.svg\";","export default __webpack_public_path__ + \"static/media/export.dda4c71d.svg\";","import MarkdownContext from \"../context/MarkdownContext\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { useState } from \"react\";\r\nimport Dribbble from \"../assets/dribbble.svg\";\r\nimport Github from \"../assets/github.svg\";\r\nimport Tutorial from \"../assets/tutorial.svg\";\r\nimport Export from \"../assets/export.svg\";\r\n\r\nfunction Credits() {\r\n  const [open, setOpen] = useState(false);\r\n  return (\r\n    <MarkdownContext.Consumer>\r\n      {(value) => {\r\n        function download() {\r\n          var text = value.rawText;\r\n\r\n          var link = document.getElementById(\"export\");\r\n          var blob = new Blob([text], { type: \"text/plain\" });\r\n          link.href = window.URL.createObjectURL(blob);\r\n          link.click();\r\n        }\r\n        function copied() {\r\n          value.handleOpen(1);\r\n        }\r\n        return (\r\n          <>\r\n            <div className=\"infos\">\r\n              <ul>\r\n                <li>\r\n                  <img src={Dribbble} alt=\"Dribbble\" />\r\n\r\n                  <a href=\"https://dribbble.com/monnifs\">Dribble</a>\r\n                </li>\r\n                <li>\r\n                  <img src={Github} alt=\"Dribbble\" />\r\n\r\n                  <a href=\"https://github.com/monikode/markdown-editor\">\r\n                    Github\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <img src={Tutorial} alt=\"Tutorial\" />\r\n                  <a href=\"#\" onClick={() => value.handleOpen(0)}>\r\n                    Tutorial\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <img src={Export} alt=\"Export\" />\r\n                  <a\r\n                    href=\"#\"\r\n                    download=\"README.md\"\r\n                    id=\"export\"\r\n                    onClick={() => download()}\r\n                  >\r\n                    Export\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <CopyToClipboard\r\n                    text={value.rawText}\r\n                    id=\"copy\"\r\n                    onCopy={() => copied()}\r\n                  >\r\n                    <button>Copy</button>\r\n                  </CopyToClipboard>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </>\r\n        );\r\n      }}\r\n    </MarkdownContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Credits;\r\n","import MarkdownContext from \"../context/MarkdownContext\";\r\n\r\nfunction Dialog() {\r\n    const texts = ['#  Heading 1 \\n ## Heading 2 \\nHeading 3', 'Text copied to clipboard!'];\r\n\r\n  return (\r\n    <MarkdownContext.Consumer>\r\n      {(value) => {\r\n        console.log(value.open);\r\n        return (\r\n          <>\r\n            {value.open>=0&& (\r\n              <div>\r\n                <div id=\"dialog\" className=\"window\">\r\n                  {texts[value.open]}\r\n                  <button onClick={() => value.handleOpen(-1)}>Close</button>\r\n                </div>\r\n                <div id=\"backdrop\"></div>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      }}\r\n    </MarkdownContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Dialog;\r\n","import \"./App.css\";\r\nimport MarkdownContext from \"./context/MarkdownContext\";\r\nimport useMarkdownEditor from \"./hooks/useMarkdownEditor\";\r\nimport RawInputArea from \"./component/RawInputArea\";\r\nimport MarkdownSanitized from \"./component/MarkdownSanitized\";\r\nimport Credits from \"./component/Credits\";\r\nimport Dialog from \"./component/Dialog\";\r\n\r\nfunction App() {\r\n  return (\r\n    <MarkdownContext.Provider value={useMarkdownEditor()}>\r\n      <div className=\"App\">\r\n        <Dialog/>\r\n        <RawInputArea />\r\n        <MarkdownSanitized />\r\n        <Credits />\r\n      </div>\r\n    </MarkdownContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}