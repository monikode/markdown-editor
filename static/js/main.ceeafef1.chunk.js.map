{"version":3,"sources":["context/MarkdownContext.js","hooks/useMarkdownEditor.js","component/RawInputArea.jsx","component/MarkdownSanitized.jsx","component/Credits.jsx","App.js","reportWebVitals.js","index.js"],"names":["React","createContext","useMarkdownEditor","md","Remarkable","useState","rawText","setRawText","handleChangeRawInputedText","event","target","value","getMarkDownAsHTMLOutput","render","RawInputArea","Consumer","className","onChange","MarkdownSanitized","MarkdownContext","ReactHtmlParser","Credits","href","download","id","onClick","text","link","document","getElementById","blob","Blob","type","window","URL","createObjectURL","click","onCopy","alert","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"kOAEeA,G,YAAAA,IAAMC,cAAc,K,gBCcpBC,MAbf,WACI,IAAMC,EAAK,IAAIC,IACf,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,MAAO,CAAED,UAASE,2BAPlB,SAAoCC,GAChCF,EAAWE,EAAMC,OAAOC,QAMkBC,wBAJ9C,WACI,OAAOT,EAAGU,OAAOP,M,OCMVQ,MAdf,WACI,OACI,cAAC,EAAgBC,SAAjB,UACK,SAAAJ,GACG,OACI,qBAAKK,UAAU,QAAf,SACI,0BAAUL,MAAOA,EAAML,QAASW,SAAUN,EAAMH,mC,iBCSzDU,MAff,WACI,OACI,cAACC,EAAgBJ,SAAjB,UACK,SAAAJ,GACG,OACI,sBAAKK,UAAU,SAAf,qBACY,uBACPI,IAAgBT,EAAMC,kC,QCwBhCS,MA/Bf,WACI,OACI,cAACF,EAAgBJ,SAAjB,UACK,SAAAJ,GAYG,OACI,qBAAKK,UAAU,QAAf,SACI,+BACI,6BAAI,mBAAGM,KAAK,+BAAR,uBACJ,6BAAI,mBAAGA,KAAK,8CAAR,sBACJ,6BAAI,mBAAGA,KAAK,IAAR,wBACJ,6BAAI,mBAAGA,KAAK,IAAIC,SAAS,YAAYC,GAAG,SAASC,QAAS,kBAjBtE,WACI,IAAIC,EAAOf,EAAML,QAEbqB,EAAOC,SAASC,eAAe,UAC/BC,EAAO,IAAIC,KAAK,CAACL,GAAO,CAAEM,KAAM,eACpCL,EAAKL,KAAOW,OAAOC,IAAIC,gBAAgBL,GACvCH,EAAKS,QAWiEb,IAA1D,sBACJ,6BAAI,cAAC,kBAAD,CAAiBG,KAAMf,EAAML,QAASkB,GAAG,OAAOa,OAAQ,WATpEC,MAAM,yBASM,SAAsE,uDCHvFC,MAdf,WACE,OACE,cAACpB,EAAgBqB,SAAjB,CAA0B7B,MAAOT,IAAjC,SAEA,sBAAKc,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCFOyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASrC,OACP,cAAC,IAAMsC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BY,M","file":"static/js/main.ceeafef1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default React.createContext('')","import { useState } from 'react';\r\nimport {Remarkable} from 'remarkable'\r\n\r\nfunction useMarkdownEditor() {\r\n    const md = new Remarkable();\r\n    const [rawText, setRawText] = useState()\r\n    function handleChangeRawInputedText(event){\r\n        setRawText(event.target.value)\r\n    };\r\n    function getMarkDownAsHTMLOutput(){\r\n        return md.render(rawText)\r\n    };\r\n\r\n    return { rawText, handleChangeRawInputedText, getMarkDownAsHTMLOutput };\r\n}\r\n\r\nexport default useMarkdownEditor","import markdownContext from \"../context/MarkdownContext\";\r\n\r\nfunction RawInputArea () {\r\n    return (\r\n        <markdownContext.Consumer>\r\n            {value=> {\r\n                return (\r\n                    <div className=\"input\">\r\n                        <textarea value={value.rawText} onChange={value.handleChangeRawInputedText}></textarea>\r\n                    </div>\r\n                )\r\n            }}\r\n        </markdownContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default RawInputArea","import MarkdownContext from \"../context/MarkdownContext\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\nfunction MarkdownSanitized () {\r\n    return (\r\n        <MarkdownContext.Consumer>\r\n            {value=> {\r\n                return (\r\n                    <div className=\"output\">\r\n                        Output: <br></br>\r\n                        {ReactHtmlParser(value.getMarkDownAsHTMLOutput())}\r\n                    </div>\r\n                )\r\n            }}\r\n        </MarkdownContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default MarkdownSanitized","import MarkdownContext from \"../context/MarkdownContext\";\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nfunction Credits() {\r\n    return (\r\n        <MarkdownContext.Consumer>\r\n            {value => {\r\n                function download() {\r\n                    var text = value.rawText\r\n\r\n                    var link = document.getElementById(\"export\");\r\n                    var blob = new Blob([text], { type: \"text/plain\" });\r\n                    link.href = window.URL.createObjectURL(blob);\r\n                    link.click();\r\n                }\r\n                function copied() {\r\n                    alert('Copied to clipboard!')\r\n                }\r\n                return (\r\n                    <div className=\"infos\">\r\n                        <ul>\r\n                            <li><a href=\"https://dribbble.com/monnifs\">Dribble</a></li>\r\n                            <li><a href=\"https://github.com/monikode/markdown-editor\">Github</a></li>\r\n                            <li><a href=\"#\">Tutorial</a></li>\r\n                            <li><a href=\"#\" download=\"README.md\" id=\"export\" onClick={()=>download()}>Export</a></li>\r\n                            <li><CopyToClipboard text={value.rawText} id=\"copy\" onCopy={()=>copied()}><button>Copy</button></CopyToClipboard></li>\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }}\r\n        </MarkdownContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default Credits","import './App.css';\r\nimport MarkdownContext from './context/MarkdownContext';\r\nimport useMarkdownEditor from './hooks/useMarkdownEditor';\r\nimport RawInputArea from './component/RawInputArea';\r\nimport MarkdownSanitized from './component/MarkdownSanitized';\r\nimport Credits from './component/Credits';\r\n\r\nfunction App() {\r\n  return (\r\n    <MarkdownContext.Provider value={useMarkdownEditor()}>\r\n\r\n    <div className=\"App\">\r\n        <RawInputArea/>\r\n        <MarkdownSanitized/>\r\n        <Credits/>\r\n    </div>\r\n    </MarkdownContext.Provider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}